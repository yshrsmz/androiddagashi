__NUXT_JSONP__("/issue/155-2020-01-17", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n){return {data:[{milestone:{id:"MDk6TWlsZXN0b25lNjI5MzU4Nw==",number:155,url:"https:\u002F\u002Fgithub.com\u002FAndroidDagashi\u002FAndroidDagashi\u002Fmilestone\u002F155",title:"155 2020-01-17",description:"Dagger 2.31, Material Components 1.3.0-rc01, Flutterのintegration testに関するアップデート, Now in Androidエピソード32, など",closedAt:"2021-01-17T10:20:56Z",issues:{totalCount:10,pageInfo:{startCursor:"Y3Vyc29yOnYyOpLPf________5vOLvHclA==",endCursor:"Y3Vyc29yOnYyOpLPf________BfOLvLZ0w==",hasPreviousPage:a,hasNextPage:a},nodes:[{url:"https:\u002F\u002Fgithub.com\u002FAndroidDagashi\u002FAndroidDagashi\u002Fissues\u002F1701",title:"Dagger 2.31",body:"https:\u002F\u002Fgithub.com\u002Fgoogle\u002Fdagger\u002Freleases\u002Ftag\u002Fdagger-2.31\r\n\r\n公式でAssisted Injectionがサポートされました。\r\n\r\nまた、Hilt側では`@HiltViewModel`が追加され、`androidx.hilt.hilt-lifecycle-viewmodel`が不要になりました。",labels:{nodes:[{name:i,description:d,color:j}]},comments:{totalCount:e,pageInfo:{startCursor:k,endCursor:k,hasPreviousPage:a,hasNextPage:a},nodes:[{body:"redditの反応はこちら\r\nhttps:\u002F\u002Fwww.reddit.com\u002Fr\u002Fandroiddev\u002Fcomments\u002Fkxovjx\u002Fdagger_231_released\u002F",publishedAt:"2021-01-17T04:08:20Z",author:{login:f,url:g,avatarUrl:h}}]}},{url:"https:\u002F\u002Fgithub.com\u002FAndroidDagashi\u002FAndroidDagashi\u002Fissues\u002F1702",title:"2021年1月13日のAndroidXリリース",body:"https:\u002F\u002Fdeveloper.android.com\u002Fjetpack\u002Fandroidx\u002Fversions\u002Fall-channel#january_13_2021\r\n\r\n安定版は Enterprise 1.1.0 と ShareTarget1.1.0 が出ています。\r\nRC版は WorkManager 2.5.0-rc01\r\nBeta版は AppCompat 1.3.0-beta01 と Core 1.5.0-beta01\r\n\r\n",labels:{nodes:[]},comments:{totalCount:e,pageInfo:{startCursor:l,endCursor:l,hasPreviousPage:a,hasNextPage:a},nodes:[{body:"恒例のIan Lake氏によるリリースノートはこちら\r\n\r\n\u003Cblockquote class=\"twitter-tweet\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EMore Jetpack releases today with stable releases of Enterprise 1.1.0, ShareTarget 1.1.0, and a bug fix release in MediaRouter 1.2.1.\u003Ca href=\"https:\u002F\u002Ft.co\u002FrGOPXFhesg\"\u003Ehttps:\u002F\u002Ft.co\u002FrGOPXFhesg\u003C\u002Fa\u003E\u003C\u002Fp\u003E&mdash; Ian Lake (@ ianhlake) \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fianhlake\u002Fstatus\u002F1349441101258661889?ref_src=twsrc%5Etfw\"\u003EJanuary 13, 2021\u003C\u002Fa\u003E\u003C\u002Fblockquote\u003E",publishedAt:"2021-01-17T03:04:45Z",author:{login:f,url:g,avatarUrl:h}}]}},{url:"https:\u002F\u002Fgithub.com\u002FAndroidDagashi\u002FAndroidDagashi\u002Fissues\u002F1703",title:"Material Components 1.3.0-rc01",body:"https:\u002F\u002Fgithub.com\u002Fmaterial-components\u002Fmaterial-components-android\u002Freleases\u002Ftag\u002F1.3.0-rc01\r\n\r\nMaterial Design仕様のDatePickerやTimePickerが追加されています。",labels:{nodes:[]},comments:{totalCount:e,pageInfo:{startCursor:m,endCursor:m,hasPreviousPage:a,hasNextPage:a},nodes:[{body:"MaterialDatePickerもMaterialTimePickerもDialogFragmentなのですが、各種リスナーを直接Fragmentに渡していく作りになっています。そのため、画面回転時などにはリスナーが消えてしまうので注意が必要です\r\n\r\nhttps:\u002F\u002Fgithub.com\u002Fmaterial-components\u002Fmaterial-components-android\u002Fissues\u002F1688",publishedAt:"2021-01-17T03:10:50Z",author:{login:f,url:g,avatarUrl:h}}]}},{url:"https:\u002F\u002Fgithub.com\u002FAndroidDagashi\u002FAndroidDagashi\u002Fissues\u002F1704",title:"マルチプロセスなアプリでAndroidX App Startupを使うときの注意点",body:"https:\u002F\u002Fblog.danlew.net\u002F2021\u002F01\u002F14\u002Fa-warning-regarding-android-app-startup-with-multiprocess-apps\u002F",labels:{nodes:[]},comments:{totalCount:c,pageInfo:{startCursor:b,endCursor:b,hasPreviousPage:a,hasNextPage:a},nodes:[]}},{url:"https:\u002F\u002Fgithub.com\u002FAndroidDagashi\u002FAndroidDagashi\u002Fissues\u002F1705",title:"Flutterのintegration testに関するアップデート",body:"https:\u002F\u002Fmedium.com\u002Fflutter\u002Fupdates-on-flutter-testing-f54aa9f74c7e\r\n\r\n`flutter_driver`プラグインにあった多くの課題を解決するために、`integration_test`という新たなプラグインを開発したそうです",labels:{nodes:[{name:"Flutter",description:d,color:"1591E5"},{name:"X-Plat",description:d,color:"efd4a0"},{name:i,description:d,color:j}]},comments:{totalCount:e,pageInfo:{startCursor:n,endCursor:n,hasPreviousPage:a,hasNextPage:a},nodes:[{body:"redditの反応はこちら\r\nhttps:\u002F\u002Fwww.reddit.com\u002Fr\u002Fandroiddev\u002Fcomments\u002Fkv1cnp\u002Fupdates_on_flutter_testing\u002F",publishedAt:"2021-01-17T04:36:43Z",author:{login:f,url:g,avatarUrl:h}}]}},{url:"https:\u002F\u002Fgithub.com\u002FAndroidDagashi\u002FAndroidDagashi\u002Fissues\u002F1706",title:"MAD Skills Kotlin and Jetpackのまとめ",body:"https:\u002F\u002Fandroid-developers.googleblog.com\u002F2021\u002F01\u002Fmad-skills-kotlin-and-jetpack-wrap-up.html",labels:{nodes:[{name:"Kotlin",description:d,color:"EC953C"}]},comments:{totalCount:c,pageInfo:{startCursor:b,endCursor:b,hasPreviousPage:a,hasNextPage:a},nodes:[]}},{url:"https:\u002F\u002Fgithub.com\u002FAndroidDagashi\u002FAndroidDagashi\u002Fissues\u002F1707",title:"Now in Androidエピソード32",body:"https:\u002F\u002Fmedium.com\u002Fandroiddevelopers\u002Fnow-in-android-32-3e3eb4270a1f",labels:{nodes:[]},comments:{totalCount:c,pageInfo:{startCursor:b,endCursor:b,hasPreviousPage:a,hasNextPage:a},nodes:[]}},{url:"https:\u002F\u002Fgithub.com\u002FAndroidDagashi\u002FAndroidDagashi\u002Fissues\u002F1708",title:"ノーコードで作られたTwitterクライアントアプリ、MarinDeck",body:"https:\u002F\u002Fwww.itmedia.co.jp\u002Fnews\u002Farticles\u002F2101\u002F08\u002Fnews080.html\r\n\r\nMarinDeckはTweetDeckを魔改造したTwitterクライアントアプリです\r\n[Kodular](https:\u002F\u002Fwww.kodular.io\u002F)というノーコードツールで開発されています",labels:{nodes:[]},comments:{totalCount:c,pageInfo:{startCursor:b,endCursor:b,hasPreviousPage:a,hasNextPage:a},nodes:[]}},{url:"https:\u002F\u002Fgithub.com\u002FAndroidDagashi\u002FAndroidDagashi\u002Fissues\u002F1709",title:"Naming Cheatsheet",body:"https:\u002F\u002Fgithub.com\u002Fkettanaito\u002Fnaming-cheatsheet\r\n",labels:{nodes:[]},comments:{totalCount:c,pageInfo:{startCursor:b,endCursor:b,hasPreviousPage:a,hasNextPage:a},nodes:[]}},{url:"https:\u002F\u002Fgithub.com\u002FAndroidDagashi\u002FAndroidDagashi\u002Fissues\u002F1710",title:"MVIアーキテクチャでKotlin FlowとChannelを使う",body:"https:\u002F\u002Fproandroiddev.com\u002Fmvi-architecture-with-kotlin-flows-and-channels-d36820b2028d\r\n\r\nMVIの特徴や実装などを説明しています。合わせて、MVVMと比較したときの長所、短所も紹介しています。",labels:{nodes:[]},comments:{totalCount:c,pageInfo:{startCursor:b,endCursor:b,hasPreviousPage:a,hasNextPage:a},nodes:[]}}]}},title:"#155 2020-01-17"}],fetch:{},mutations:[]}}(false,null,0,"",1,"yshrsmz","https:\u002F\u002Fgithub.com\u002Fyshrsmz","https:\u002F\u002Favatars.githubusercontent.com\u002Fu\u002F654889?v=4","reddit","d93f0b","Y3Vyc29yOnYyOpHOLWcNeg==","Y3Vyc29yOnYyOpHOLWb3eQ==","Y3Vyc29yOnYyOpHOLWb6JQ==","Y3Vyc29yOnYyOpHOLWcWUw==")));